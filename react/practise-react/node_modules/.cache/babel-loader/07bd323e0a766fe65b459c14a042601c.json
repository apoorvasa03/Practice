{"ast":null,"code":"var _jsxFileName = \"/Users/amulyagowda/Documents/practice/react/practise-react/src/component/higher-order-component/HigherOrderComponent.jsx\";\n\n/** HoC is the function that take component as an argument and return new component */\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst higherOrderComponent = OriginalComponent => {\n  var _s = $RefreshSig$();\n\n  return _s(_ref => {\n    _s();\n\n    let { ...props\n    } = _ref;\n    let [count, setCount] = useState(0);\n\n    const incrementCount = () => {\n      setCount(prevCount => prevCount + 1);\n    };\n\n    return /*#__PURE__*/_jsxDEV(OriginalComponent, {\n      count: count,\n      incrementCount: incrementCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this);\n  }, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n};\n\nconst higherOrderComponent2 = WrappedComponent => {\n  class HOC extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        count: 1\n      };\n      this.incrementCount = this.incrementCount.bind(this);\n    }\n\n    incrementCount() {\n      this.setState(prevState => {\n        return {\n          count: prevState.count + 1\n        };\n      });\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        count: this.state.count,\n        incrementCount: this.incrementCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 16\n      }, this);\n    }\n\n  }\n\n  return HOC;\n};\n\nexport default higherOrderComponent;","map":{"version":3,"sources":["/Users/amulyagowda/Documents/practice/react/practise-react/src/component/higher-order-component/HigherOrderComponent.jsx"],"names":["React","useState","higherOrderComponent","OriginalComponent","props","count","setCount","incrementCount","prevCount","higherOrderComponent2","WrappedComponent","HOC","Component","constructor","state","bind","setState","prevState","render"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AACA,MAAMC,oBAAoB,GAAGC,iBAAiB;AAAA;;AAAA,YAAI,QAAgB;AAAA;;AAAA,QAAf,EAAC,GAAGC;AAAJ,KAAe;AAC9D,QAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAD,CAAhC;;AAEA,UAAMM,cAAc,GAAG,MAAM;AACzBD,MAAAA,QAAQ,CAACE,SAAS,IAAGA,SAAS,GAAG,CAAzB,CAAR;AACH,KAFD;;AAGA,wBACI,QAAC,iBAAD;AAAmB,MAAA,KAAK,EAAEH,KAA1B;AAAiC,MAAA,cAAc,EAAEE;AAAjD;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,GAT6C;AAAA,CAA9C;;AAWA,MAAME,qBAAqB,GAAGC,gBAAgB,IAAI;AAC9C,QAAMC,GAAN,SAAkBX,KAAK,CAACY,SAAxB,CAAkC;AAC9BC,IAAAA,WAAW,CAACT,KAAD,EAAO;AACd,YAAMA,KAAN;AACA,WAAKU,KAAL,GAAa;AACTT,QAAAA,KAAK,EAAE;AADE,OAAb;AAGA,WAAKE,cAAL,GAAsB,KAAKA,cAAL,CAAoBQ,IAApB,CAAyB,IAAzB,CAAtB;AACH;;AACDR,IAAAA,cAAc,GAAG;AACb,WAAKS,QAAL,CAAeC,SAAD,IAAe;AACzB,eAAO;AAAEZ,UAAAA,KAAK,EAAIY,SAAS,CAACZ,KAAV,GAAkB;AAA7B,SAAP;AACH,OAFD;AAGH;;AACHa,IAAAA,MAAM,GAAG;AACP,0BAAO,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWT,KAApC;AAA2C,QAAA,cAAc,EAAE,KAAKE;AAAhE;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAf+B;;AAiBlC,SAAOI,GAAP;AACD,CAnBH;;AAqBA,eAAeT,oBAAf","sourcesContent":["/** HoC is the function that take component as an argument and return new component */\n\nimport React, {useState} from \"react\"\nconst higherOrderComponent = OriginalComponent => ({...props}) => {\n    let [count, setCount] = useState(0)\n\n    const incrementCount = () => {\n        setCount(prevCount=> prevCount + 1)\n    }\n    return(\n        <OriginalComponent count={count} incrementCount={incrementCount}/>\n    )\n}\n\nconst higherOrderComponent2 = WrappedComponent => {\n    class HOC extends React.Component {\n        constructor(props){\n            super(props)\n            this.state = {\n                count: 1\n            }\n            this.incrementCount = this.incrementCount.bind(this)\n        }\n        incrementCount() {\n            this.setState((prevState) => {\n                return { count : (prevState.count + 1)}\n            })\n        }\n      render() {\n        return <WrappedComponent count={this.state.count} incrementCount={this.incrementCount}/>\n      }\n    }\n    return HOC\n  }\n\nexport default higherOrderComponent"]},"metadata":{},"sourceType":"module"}