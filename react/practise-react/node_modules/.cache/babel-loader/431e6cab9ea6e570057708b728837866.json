{"ast":null,"code":"var _jsxFileName = \"/Users/amulyagowda/Documents/practice/react/practise-react/src/component/error-boundaries/ErrorBoundaries.jsx\";\n\n/*When we are not using the error boundary, instead of seeing an error, we see a blank page. \n Since any error inside the render method leads to unmounting of the component. \n To display an error that occurs inside the render method, we use error boundaries */\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Hero = _ref => {\n  let {\n    name\n  } = _ref;\n\n  if (name === \"Joker\") {\n    throw new Error('joker is not an hero!!');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Hero;\nexport class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidCatch(error) {\n    console.log('---------', error);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Something Went Wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    }\n\n    return this.props.children;\n  }\n\n}\nexport default Hero;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"sources":["/Users/amulyagowda/Documents/practice/react/practise-react/src/component/error-boundaries/ErrorBoundaries.jsx"],"names":["React","Hero","name","Error","ErrorBoundary","Component","constructor","props","state","hasError","getDerivedStateFromError","error","componentDidCatch","console","log","render","children"],"mappings":";;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,IAAI,GAAG,QAAY;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;;AACrB,MAAGA,IAAI,KAAK,OAAZ,EAAoB;AAChB,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACH;;AACD,sBACI;AAAA,cAAMD;AAAN;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAPD;;KAAMD,I;AASN,OAAO,MAAMG,aAAN,SAA4BJ,KAAK,CAACK,SAAlC,CAA2C;AAC9CC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAGH;;AAE8B,SAAxBC,wBAAwB,CAACC,KAAD,EAAO;AAClC,WAAO;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KAAP;AACH;;AAEDG,EAAAA,iBAAiB,CAACD,KAAD,EAAO;AACpBE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,KAAzB;AACH;;AAEDI,EAAAA,MAAM,GAAE;AACJ,QAAG,KAAKP,KAAL,CAAWC,QAAd,EAAuB;AACnB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,WAAO,KAAKF,KAAL,CAAWS,QAAlB;AACH;;AAtB6C;AAyBlD,eAAgBf,IAAhB","sourcesContent":["/*When we are not using the error boundary, instead of seeing an error, we see a blank page. \n Since any error inside the render method leads to unmounting of the component. \n To display an error that occurs inside the render method, we use error boundaries */\n\nimport React from \"react\"\n\nconst Hero = ({name}) => {\n    if(name === \"Joker\"){\n        throw new Error('joker is not an hero!!')\n    }\n    return(\n        <div>{name}</div>\n    )\n}\n\nexport class ErrorBoundary extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            hasError: false\n        }\n    }\n\n    static getDerivedStateFromError(error){\n        return { hasError: true}\n    }\n\n    componentDidCatch(error){\n        console.log('---------', error)\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h3>Something Went Wrong</h3>\n        }\n\n        return this.props.children\n    }\n}\n\nexport default  Hero\n\n"]},"metadata":{},"sourceType":"module"}