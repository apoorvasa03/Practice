{"ast":null,"code":"var _jsxFileName = \"/Users/amulyagowda/Documents/practice/react/practise-react/src/component/higher-order-component/HigherOrderComponent.jsx\",\n    _s = $RefreshSig$();\n\n/** HoC is the function that take component as an argument and return new component */\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HigherOrderComponent = OriginalComponent => {\n  _s();\n\n  let [count, setCount] = useState(0);\n\n  const incrementCount = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(OriginalComponent, {\n    count: count,\n    incrementCount: incrementCount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }, this);\n}; // const higherOrderComponent = WrappedComponent => {\n//     class HOC extends React.Component {\n//         constructor(props){\n//             super(props)\n//             this.state = {\n//                 count: 1\n//             }\n//             this.incrementCount = this.incrementCount.bind(this)\n//         }\n//         incrementCount() {\n//             this.setState((prevState) => {\n//                 return { count : (prevState.count + 1)}\n//             })\n//         }\n//       render() {\n//         return <WrappedComponent count={this.state.count} incrementCount={this.incrementCount}/>\n//       }\n//     }\n//     return HOC\n//   }\n\n\n_s(HigherOrderComponent, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c = HigherOrderComponent;\nexport default higherOrderComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"HigherOrderComponent\");","map":{"version":3,"sources":["/Users/amulyagowda/Documents/practice/react/practise-react/src/component/higher-order-component/HigherOrderComponent.jsx"],"names":["React","useState","HigherOrderComponent","OriginalComponent","count","setCount","incrementCount","prevCount","higherOrderComponent"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AACA,MAAMC,oBAAoB,GAAIC,iBAAD,IAAuB;AAAA;;AAChD,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAhC;;AAEA,QAAMK,cAAc,GAAG,MAAM;AACzBD,IAAAA,QAAQ,CAACE,SAAS,IAAGA,SAAS,GAAG,CAAzB,CAAR;AACH,GAFD;;AAGA,sBACI,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAEH,KAA1B;AAAiC,IAAA,cAAc,EAAEE;AAAjD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CATD,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA9BMJ,oB;;KAAAA,oB;AAgCN,eAAeM,oBAAf","sourcesContent":["/** HoC is the function that take component as an argument and return new component */\n\nimport React, {useState} from \"react\"\nconst HigherOrderComponent = (OriginalComponent) => {\n    let [count, setCount] = useState(0)\n\n    const incrementCount = () => {\n        setCount(prevCount=> prevCount + 1)\n    }\n    return(\n        <OriginalComponent count={count} incrementCount={incrementCount}/>\n    )\n}\n\n// const higherOrderComponent = WrappedComponent => {\n//     class HOC extends React.Component {\n//         constructor(props){\n//             super(props)\n//             this.state = {\n//                 count: 1\n//             }\n//             this.incrementCount = this.incrementCount.bind(this)\n//         }\n//         incrementCount() {\n//             this.setState((prevState) => {\n//                 return { count : (prevState.count + 1)}\n//             })\n//         }\n//       render() {\n//         return <WrappedComponent count={this.state.count} incrementCount={this.incrementCount}/>\n//       }\n//     }\n//     return HOC\n//   }\n\nexport default higherOrderComponent"]},"metadata":{},"sourceType":"module"}