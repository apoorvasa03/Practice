{"ast":null,"code":"var _jsxFileName = \"/Users/amulyagowda/Documents/practice/react/practise-react/src/component/higher-order-component/HigherOrderComponent.jsx\";\n\n/** HoC is the function that take component as an argument and return new component */\nimport React, { useState } from \"react\"; // const HigherOrderComponent = (OriginalComponent) => {\n//     let [count, setCount] = useState(0)\n//     const incrementCount = () => {\n//         setCount(prevCount=> prevCount + 1)\n//     }\n//     return(\n//         <OriginalComponent count={count} incrementCount={incrementCount}/>\n//     )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst higherOrderComponent = WrappedComponent => {\n  class HOC extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        count: 1\n      };\n    }\n\n    incrementCount() {\n      this.setState(prevState => {\n        return {\n          count: prevState + 1\n        };\n      });\n    }\n\n    render() {\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        count: this.state.count,\n        incrementCount: this.incrementCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 16\n      }, this);\n    }\n\n  }\n\n  return HOC;\n};\n\nexport default higherOrderComponent;","map":{"version":3,"sources":["/Users/amulyagowda/Documents/practice/react/practise-react/src/component/higher-order-component/HigherOrderComponent.jsx"],"names":["React","useState","higherOrderComponent","WrappedComponent","HOC","Component","constructor","props","state","count","incrementCount","setState","prevState","render"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,oBAAoB,GAAGC,gBAAgB,IAAI;AAC7C,QAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAC9BC,IAAAA,WAAW,CAACC,KAAD,EAAO;AACd,YAAMA,KAAN;AACA,WAAKC,KAAL,GAAa;AACTC,QAAAA,KAAK,EAAE;AADE,OAAb;AAGH;;AACDC,IAAAA,cAAc,GAAG;AACb,WAAKC,QAAL,CAAeC,SAAD,IAAe;AACzB,eAAO;AAACH,UAAAA,KAAK,EAAEG,SAAS,GAAE;AAAnB,SAAP;AACH,OAFD;AAGH;;AACHC,IAAAA,MAAM,GAAG;AACP,0BAAO,QAAC,gBAAD;AAAkB,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWC,KAApC;AAA2C,QAAA,cAAc,EAAE,KAAKC;AAAhE;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAd+B;;AAgBlC,SAAON,GAAP;AACD,CAlBH;;AAoBA,eAAeF,oBAAf","sourcesContent":["/** HoC is the function that take component as an argument and return new component */\n\nimport React, { useState } from \"react\"\n// const HigherOrderComponent = (OriginalComponent) => {\n//     let [count, setCount] = useState(0)\n\n//     const incrementCount = () => {\n//         setCount(prevCount=> prevCount + 1)\n//     }\n//     return(\n//         <OriginalComponent count={count} incrementCount={incrementCount}/>\n//     )\n// }\n\nconst higherOrderComponent = WrappedComponent => {\n    class HOC extends React.Component {\n        constructor(props){\n            super(props)\n            this.state = {\n                count: 1\n            }\n        }\n        incrementCount() {\n            this.setState((prevState) => {\n                return {count: prevState +1}\n            })\n        }\n      render() {\n        return <WrappedComponent count={this.state.count} incrementCount={this.incrementCount}/>\n      }\n    }\n    return HOC\n  }\n\nexport default higherOrderComponent"]},"metadata":{},"sourceType":"module"}